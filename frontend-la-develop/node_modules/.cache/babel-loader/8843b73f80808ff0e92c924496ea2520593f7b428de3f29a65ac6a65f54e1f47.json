{"ast":null,"code":"export const tocapitalCase = str => {\n  if (str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport const numberToASCII = number => {\n  // Use String.fromCharCode() to convert the number to ASCII\n  return String.fromCharCode(number);\n};\nexport const initializeRecaptcha = () => {\n  return new Promise(resolve => {\n    window.grecaptcha.ready(async () => {\n      const token = await window.grecaptcha.execute(\"6LeSl0IpAAAAAImReR2KjLPI11kTQPZFvOsisafd\", {\n        action: \"submit\"\n      });\n      resolve(token);\n    });\n  });\n};\nexport const dateFormate = dateFormate => {\n  const date = new Date(dateFormate); // Example date\n\n  const options = {\n    weekday: \"long\",\n    // Full day name (e.g., Monday)\n    month: \"short\",\n    // Short month name (e.g., Oct)\n    day: \"numeric\",\n    // Day of the month (e.g., 21)\n    year: \"numeric\",\n    // Full year (e.g., 2023)\n    hour: \"numeric\",\n    // Hour (e.g., 8)\n    minute: \"numeric\",\n    // Minute (e.g., 22)\n    hour12: true // Use 12-hour clock (true) or 24-hour clock (false)\n  };\n  const formattedDate = new Intl.DateTimeFormat(\"en-US\", options).format(date);\n  return formattedDate;\n};\nexport const getStatusClassName = status => {\n  switch (status) {\n    case \"Pending\":\n      return \"warning\";\n    case \"Success\":\n      return \"success\";\n    case \"Rejected\":\n      return \"danger\";\n    default:\n      return \"\";\n  }\n};","map":{"version":3,"names":["tocapitalCase","str","length","charAt","toUpperCase","slice","numberToASCII","number","String","fromCharCode","initializeRecaptcha","Promise","resolve","window","grecaptcha","ready","token","execute","action","dateFormate","date","Date","options","weekday","month","day","year","hour","minute","hour12","formattedDate","Intl","DateTimeFormat","format","getStatusClassName","status"],"sources":["/home/tarik/Downloads/frontend-la-develop/src/Common/Common.js"],"sourcesContent":["export const tocapitalCase = (str) => {\n  if (str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport const numberToASCII = (number) => {\n  // Use String.fromCharCode() to convert the number to ASCII\n  return String.fromCharCode(number);\n};\nexport const initializeRecaptcha = () => {\n  return new Promise((resolve) => {\n    window.grecaptcha.ready(async () => {\n      const token = await window.grecaptcha.execute(\n        \"6LeSl0IpAAAAAImReR2KjLPI11kTQPZFvOsisafd\",\n        {\n          action: \"submit\",\n        }\n      );\n      resolve(token);\n    });\n  });\n};\nexport const dateFormate = (dateFormate) => {\n  const date = new Date(dateFormate); // Example date\n\n  const options = {\n    weekday: \"long\", // Full day name (e.g., Monday)\n    month: \"short\", // Short month name (e.g., Oct)\n    day: \"numeric\", // Day of the month (e.g., 21)\n    year: \"numeric\", // Full year (e.g., 2023)\n    hour: \"numeric\", // Hour (e.g., 8)\n    minute: \"numeric\", // Minute (e.g., 22)\n    hour12: true, // Use 12-hour clock (true) or 24-hour clock (false)\n  };\n\n  const formattedDate = new Intl.DateTimeFormat(\"en-US\", options).format(date);\n  return formattedDate;\n};\n\nexport const getStatusClassName = (status) => {\n  switch (status) {\n    case \"Pending\":\n      return \"warning\";\n    case \"Success\":\n      return \"success\";\n    case \"Rejected\":\n      return \"danger\";\n    default:\n      return \"\";\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,GAAG,IAAK;EACpC,IAAIA,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE;IAClB,OAAOD,GAAG;EACZ;EACA,OAAOA,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC;AACnD,CAAC;AACD,OAAO,MAAMC,aAAa,GAAIC,MAAM,IAAK;EACvC;EACA,OAAOC,MAAM,CAACC,YAAY,CAACF,MAAM,CAAC;AACpC,CAAC;AACD,OAAO,MAAMG,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,MAAM,CAACC,UAAU,CAACC,KAAK,CAAC,YAAY;MAClC,MAAMC,KAAK,GAAG,MAAMH,MAAM,CAACC,UAAU,CAACG,OAAO,CAC3C,0CAA0C,EAC1C;QACEC,MAAM,EAAE;MACV,CACF,CAAC;MACDN,OAAO,CAACI,KAAK,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMG,WAAW,GAAIA,WAAW,IAAK;EAC1C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC;;EAEpC,MAAMG,OAAO,GAAG;IACdC,OAAO,EAAE,MAAM;IAAE;IACjBC,KAAK,EAAE,OAAO;IAAE;IAChBC,GAAG,EAAE,SAAS;IAAE;IAChBC,IAAI,EAAE,SAAS;IAAE;IACjBC,IAAI,EAAE,SAAS;IAAE;IACjBC,MAAM,EAAE,SAAS;IAAE;IACnBC,MAAM,EAAE,IAAI,CAAE;EAChB,CAAC;EAED,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEV,OAAO,CAAC,CAACW,MAAM,CAACb,IAAI,CAAC;EAC5E,OAAOU,aAAa;AACtB,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAIC,MAAM,IAAK;EAC5C,QAAQA,MAAM;IACZ,KAAK,SAAS;MACZ,OAAO,SAAS;IAClB,KAAK,SAAS;MACZ,OAAO,SAAS;IAClB,KAAK,UAAU;MACb,OAAO,QAAQ;IACjB;MACE,OAAO,EAAE;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}