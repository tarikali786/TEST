{"ast":null,"code":"export const claimRewards = async queryParams => {\n  const queryString = new URLSearchParams(queryParams).toString();\n  const response = await fetch(`/api/v1/admin/users/claimed-rewards?${queryString}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (response.ok) {\n    const responseData = await response.json();\n    return {\n      data: responseData\n    };\n  } else {\n    const err = await response.json();\n    return {\n      err\n    };\n  }\n};\nexport const claimRewardUpdate = async sendData => {\n  try {\n    const response = await fetch(`/api/v1/admin/users/claimed-rewards`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(sendData)\n    });\n    if (response.ok) {\n      const responseData = await response.json();\n      return {\n        data: responseData\n      };\n    } else {\n      const err = await response.json();\n      return Promise.reject({\n        error: err\n      }); // Reject the promise with an error object\n    }\n  } catch (error) {\n    console.error(\"Error in updateUserData function:\", error);\n    return Promise.reject({\n      error: \"An error occurred while updating data.\"\n    });\n  }\n};","map":{"version":3,"names":["claimRewards","queryParams","queryString","URLSearchParams","toString","response","fetch","method","headers","ok","responseData","json","data","err","claimRewardUpdate","sendData","body","JSON","stringify","Promise","reject","error","console"],"sources":["/home/tarik/Downloads/frontend-la-develop/src/admin/features/claimRewards/claimRewardsAPI.js"],"sourcesContent":["export const claimRewards = async (queryParams) => {\n  const queryString = new URLSearchParams(queryParams).toString();\n\n  const response = await fetch(\n    `/api/v1/admin/users/claimed-rewards?${queryString}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n\n  if (response.ok) {\n    const responseData = await response.json();\n    return { data: responseData };\n  } else {\n    const err = await response.json();\n    return { err };\n  }\n};\n\nexport const claimRewardUpdate = async (sendData) => {\n  try {\n    const response = await fetch(`/api/v1/admin/users/claimed-rewards`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(sendData),\n    });\n\n    if (response.ok) {\n      const responseData = await response.json();\n      return { data: responseData };\n    } else {\n      const err = await response.json();\n      return Promise.reject({ error: err }); // Reject the promise with an error object\n    }\n  } catch (error) {\n    console.error(\"Error in updateUserData function:\", error);\n    return Promise.reject({ error: \"An error occurred while updating data.\" });\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAOC,WAAW,IAAK;EACjD,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,WAAW,CAAC,CAACG,QAAQ,CAAC,CAAC;EAE/D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,uCAAsCJ,WAAY,EAAC,EACpD;IACEK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CACF,CAAC;EAED,IAAIH,QAAQ,CAACI,EAAE,EAAE;IACf,MAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC1C,OAAO;MAAEC,IAAI,EAAEF;IAAa,CAAC;EAC/B,CAAC,MAAM;IACL,MAAMG,GAAG,GAAG,MAAMR,QAAQ,CAACM,IAAI,CAAC,CAAC;IACjC,OAAO;MAAEE;IAAI,CAAC;EAChB;AACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoC,EAAE;MAClEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAIV,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAC1C,OAAO;QAAEC,IAAI,EAAEF;MAAa,CAAC;IAC/B,CAAC,MAAM;MACL,MAAMG,GAAG,GAAG,MAAMR,QAAQ,CAACM,IAAI,CAAC,CAAC;MACjC,OAAOQ,OAAO,CAACC,MAAM,CAAC;QAAEC,KAAK,EAAER;MAAI,CAAC,CAAC,CAAC,CAAC;IACzC;EACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAOF,OAAO,CAACC,MAAM,CAAC;MAAEC,KAAK,EAAE;IAAyC,CAAC,CAAC;EAC5E;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}